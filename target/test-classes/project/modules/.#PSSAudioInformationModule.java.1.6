package pss.modules;

import static org.junit.Assert.assertEquals;


import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.inject.Inject;

import data.bundle.TestPropertyBundle;
/**
 * 
 * @author clachan
 *
 */
public class PSSAudioInformationModule {
	WebElement element;
	
	@Inject
	TestPropertyBundle properties;
	
	@Inject
	WebDriver driver;
	
	public PSSAudioInformationModule(WebDriver driver, TestPropertyBundle properties) {
		this.driver = driver;
		this.properties = properties;
	}
	
	public PSSAudioInformationModule goToStartPage(String url){
		System.out.println(properties.strings.get("page.url"));
		driver.get(url);
		return this;
	}
	
	//if new select new radio button
	public PSSAudioInformationModule isExistingCustomer(boolean existing){
			
		if(!existing)
		{
			element = driver.findElement(By.id("IS_END_CUSTOMER_WEBEX_CUSTOMER_1"));
			element.click();
		}
		
		return this;
	}
	
	//method: test the exsiting customer information
	// find elements labels , assert elements are same
	public PSSAudioInformationModule testExisingCustomerFields()
	{
		element = driver.findElement(By.xpath("id('PSSform_Panel')/p[1]/label"));
		assertEquals(element.getText(), "*Existing WebEx URL");
		
		element = driver.findElement(By.xpath("id('PSSform_Panel')/p[2]/label"));
		assertEquals(element.getText(), "Existing WebEx Domain");

		
		return this;
	}
		
	//method: fill in existing customer information
	// slect first field input some data
	public PSSAudioInformationModule fillExisingCustomerFields()
	{
		element = driver.findElement(By.id("EXISTING_WEBEX_URL"));
		element.sendKeys("oms");
		element.sendKeys(Keys.TAB); //Tab out for validation
		
			
			
		return this;
	}
		
	public PSSAudioInformationModule  selectLabelsAndVerify (ArrayList<String> listOfLabels, String xpath)
	{
		//get the block form with contains the code
		WebElement endCustomerForm = driver.findElement(By.xpath(xpath)); 
		
		//get elements and put it into array list endCustomerFormlabels
		List<WebElement> endCustomerFormlabels = endCustomerForm.findElements(By.xpath(".//label"));		
		for(int i = 0; i < listOfLabels.size(); i++){
			assertEquals(listOfLabels.get(i), endCustomerFormlabels.get(i).getText());
		}
			
		return this;
	}
		
	public PSSAudioInformationModule selectLabelsAndVerifyWithWait(ArrayList<String> listOfLabels,final String xpath){
		
		fillExisingCustomerFields();
		WebDriverWait waitDriver = new WebDriverWait(driver,properties.integers.get("default.timeOut"));
		waitDriver.until(ExpectedConditions.elementToBeClickable(By.xpath(xpath)));
		
		selectLabelsAndVerify(listOfLabels,xpath);
		return this;
	}
		
	private ArrayList<String> getLabels(String xpath)
	{	
		//wait for set up
		WebDriverWait waitDriver = new WebDriverWait(driver,properties.integers.get("default.timeOut"));
		waitDriver.until(ExpectedConditions.elementToBeClickable(By.xpath(xpath)));
		
		//get web form block
		WebElement endCustomerForm = driver.findElement(By.xpath(xpath)); 
		//get elements and put it into array list endCustomerFormlabels
		ArrayList<WebElement> endCustomerFormlabels = (ArrayList<WebElement>) endCustomerForm.findElements(By.xpath(".//label"));
		ArrayList<String> temp = new ArrayList<String>();
		
		//remove all the empty labels
		removeSpaces(endCustomerFormlabels);
		for(WebElement element: endCustomerFormlabels)
		{
			temp.add(element.getText());
			//System.out.println(element.getText() + " END OF ELE");
		}	
		return temp;
	}
	
	
	/**
	 * 
	 * @param labels List of Labels to be checked against
	 * @param xpath of Audio Information module to be checked
	 * @return
	 */
	public PSSAudioInformationModule checkDefaultAudioLabels(ArrayList<String> labels, String xpath)
	{
		ArrayList<String> formLabels = getLabels(xpath);
		
		assertEquals(formLabels.containsAll(labels),true);
		return this;			
	}
		
		
		
	public PSSAudioInformationModule checkAudioInformationMP8AudioLabels(ArrayList<String> lables,String xpath){
			
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_0']")).click();
		ArrayList<String> mp8 = getLabels(".//*[@id='MC_info_hidden_panel']");
		assertEquals(mp8.containsAll(lables),true);
		
		return this;
	}
		
	public PSSAudioInformationModule checkAudioInformationMP85AudioLabels(ArrayList<String> labels, String xpath)
	{		
		
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_1']")).click();
		driver.findElement(By.xpath(".//*[@id='DEPLOY_WEBEX_NODE_FOR_MCS_0']")).click();
		ArrayList<String> mp85 = getLabels(".//*[@id='MC_info_hidden_panel']");
		assertEquals(mp85.containsAll(labels),true);
		return this;
	}
			
	public PSSAudioInformationModule checkAudioInformation3rdPartyTelephony(ArrayList<String> thirdPartyLabels, String xpath)
	{		
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_3']")).click();
		ArrayList<String> thirdpty = getLabels(".//*[@id='thirdparty_AUDIO_DIV']/div");
		assertEquals(thirdpty.containsAll(thirdPartyLabels),true);
		
		return this;
	}
			
	public PSSAudioInformationModule checkErrorMessagesLabels(ArrayList<String> errorLabels, String xpath){
		
		String errorMessage;
		
		//click on Audio Button
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_0']")).click();
		
		waitForWebElement(".//*[@id='ext-gen1009']").click();
		waitForWebElement(".//*[input[@id='MP_APP_SERVER_HOST_NAME']]/span");
		
		//
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='MP_APP_SERVER_HOST_NAME']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
				
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='CALL_NUMBER_1']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
			
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='SITE_ADMIN_CONTACT_FIRST_NAME']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");

		errorMessage = driver.findElement(By.xpath(".//*[input[@id='SITE_ADMIN_CONTACT_LAST_NAME']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='SITE_ADMIN_CONTACT_EMAIL']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='SITE_ADMIN_CONTACT_PHONE_NUM']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='WEBEX_USERNAME_FOR_SITE_ADMIN']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='SITE_ADMIN_CONTACT_EMAIL']")).sendKeys("abc123");
		driver.findElement(By.xpath(".//*[@id='SITE_ADMIN_CONTACT_EMAIL']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='SITE_ADMIN_CONTACT_EMAIL']]/span")).getText();
		assertEquals(errorMessage,"The email entered is not valid format.");
		
		
		//click on mp85 yes button
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_1']")).click();
		driver.findElement(By.xpath(".//*[@id='DEPLOY_WEBEX_NODE_FOR_MCS_0']")).click();
		
		driver.findElement(By.xpath(".//*[@id='NODE_HOST_NAME']")).sendKeys("");
		driver.findElement(By.xpath(".//*[@id='NODE_HOST_NAME']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_HOST_NAME']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='NODE_DOMAIN']")).sendKeys("");
		driver.findElement(By.xpath(".//*[@id='NODE_DOMAIN']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_DOMAIN']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='NODE_SERIAL_NUMBER']")).sendKeys("");
		driver.findElement(By.xpath(".//*[@id='NODE_SERIAL_NUMBER']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_SERIAL_NUMBER']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_ACCOUNT_NAME']")).sendKeys("");
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_ACCOUNT_NAME']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_MANAGER_ACCOUNT_NAME']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_EMAILS']")).sendKeys("");
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_EMAILS']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_MANAGER_EMAILS']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_EMAILS']")).sendKeys("abc123");
		driver.findElement(By.xpath(".//*[@id='NODE_MANAGER_EMAILS']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='NODE_MANAGER_EMAILS']]/span")).getText();
		assertEquals(errorMessage,"The email entered is not valid format.");
		
		driver.findElement(By.xpath(".//*[@id='AUDIO_PROVIDER_QUESTION_3']")).click();
		driver.findElement(By.xpath(".//*[@id='thirdparty_AUDIO_11']")).click();
		driver.findElement(By.xpath(".//*[@id='THIRD_PARTY_AUDIO_IF_OTHER']")).sendKeys(Keys.TAB);
		errorMessage = driver.findElement(By.xpath(".//*[input[@id='THIRD_PARTY_AUDIO_IF_OTHER']]/span")).getText();
		assertEquals(errorMessage,"This field is empty");
		
		return this;
	}
	
	
	/**
	 * 
	 * @param label
	 * @return
	 * Note: If someElement xpath is retrieved from properties then would this function be only used once?
	 * Should it be in params instead?
	 */
	public PSSAudioInformationModule clickradioButton(String label,String xpath){
		WebElement someElement = driver.findElement(By.xpath(xpath));
		ArrayList<WebElement> buttonList = (ArrayList<WebElement>) someElement.findElements(By.className("radio"));
		for(WebElement element : buttonList)
		{
			if(element.getText().contains(label))
			{
				element.click();
				break;
			}				
		}
		return this;
	}
	
	private WebElement waitForWebElement(final String xpath)
	{
		WebElement myDynamicElement = (new WebDriverWait(driver, properties.integers.get("default.timeOut")))
				  .until(new ExpectedCondition<WebElement>(){
					@Override
					public WebElement apply(WebDriver d) {
						return d.findElement(By.xpath(xpath));
					}});
		return myDynamicElement;
	}
	/**
	 * helper method that Remove spaces from a list of WebElements
	 * @param list of WebElements
	 * @return
	 */
	private ArrayList<WebElement> removeSpaces(ArrayList<WebElement> list)
	{
		for(int i = 0; i < list.size();i++)
		{
			if(list.get(i).getText().equals(""))
			{
				list.remove(i);
				i--;
			}
		}
		return null;
	}	
	public PSSAudioInformationModule doSomeTest(){
		return this;
	}
}
